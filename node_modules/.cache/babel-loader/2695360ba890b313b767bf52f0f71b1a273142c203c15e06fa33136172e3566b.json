{"ast":null,"code":"import _slicedToArray from \"/project/cv-application-original/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"/project/cv-application-original/src/components/InputSection.jsx\",\n  _s = $RefreshSig$();\nimport react, { useState } from \"react\";\nimport \"../styles.css\";\nimport Button from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function InputSection(_ref) {\n  _s();\n  var children = _ref.children,\n    title = _ref.title,\n    cv = _ref.cv;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    issubmit = _useState2[0],\n    setissubmit = _useState2[1];\n  var cvarray = [];\n  var element;\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    work = _useState4[0],\n    setwork = _useState4[1];\n  function tap(params) {\n    issubmit === true ? setissubmit(false) : setissubmit(true);\n    console.log(cv);\n    for (var key in cv) {\n      if (key == title) {\n        element = cv[key];\n      }\n    }\n    for (var _key in element) {\n      var value = element[_key];\n      // let link =\n      // console.log(link);\n      var format = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cv-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: _key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this);\n      cvarray.push(format);\n    }\n    setwork(cvarray);\n    // console.log(works)\n  }\n\n  return !issubmit ? /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"InputSection\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), children, /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        title: \"Submit\",\n        color: \"red\",\n        type: \"submit\",\n        ontap: tap,\n        btntype: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"InputSection\",\n      children: [work, /*#__PURE__*/_jsxDEV(Button, {\n        title: \"Edit\",\n        color: \"green\",\n        type: \"edit\",\n        ontap: tap,\n        btntype: \"edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(InputSection, \"Ilkk1ALpSqWVMWVWZEXbNDEM8+Q=\");\n_c = InputSection;\nvar _c;\n$RefreshReg$(_c, \"InputSection\");","map":{"version":3,"names":["react","useState","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","InputSection","_ref","_s","children","title","cv","_useState","_useState2","_slicedToArray","issubmit","setissubmit","cvarray","element","_useState3","_useState4","work","setwork","tap","params","console","log","key","value","format","className","fileName","_jsxFileName","lineNumber","columnNumber","push","id","toUpperCase","color","type","ontap","btntype","_c","$RefreshReg$"],"sources":["/project/cv-application-original/src/components/InputSection.jsx"],"sourcesContent":["import react, { useState } from \"react\";\r\nimport \"../styles.css\";\r\nimport Button from \"./Button\";\r\nexport default function InputSection({ children, title, cv }) {\r\n  let [issubmit, setissubmit] = useState(false);\r\n  let cvarray = [];\r\n  let element;\r\n  const [work, setwork] = useState([]);\r\n  function tap(params) {\r\n    issubmit === true ? setissubmit(false) : setissubmit(true);\r\n    console.log(cv);\r\n    for (const key in cv) {\r\n      if (key == title) {\r\n        element = cv[key];\r\n      }\r\n    }\r\n    for (const key in element) {\r\n      let value = element[key];\r\n      // let link =\r\n      // console.log(link);\r\n      let format = (\r\n        <div className=\"cv-body\">\r\n          <h1>{key}</h1>\r\n          <p>{value}</p>\r\n        </div>\r\n      );\r\n      cvarray.push(format);\r\n    }\r\n\r\n    setwork(cvarray);\r\n    // console.log(works)\r\n  }\r\n\r\n  return !issubmit ? (\r\n    <div id=\"InputSection\">\r\n      <h2>{title.toUpperCase()}</h2>\r\n\r\n      {children}\r\n      <div>\r\n        <Button\r\n          title=\"Submit\"\r\n          color=\"red\"\r\n          type=\"submit\"\r\n          ontap={tap}\r\n          btntype=\"submit\"\r\n        />\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <>\r\n      <div id=\"InputSection\">\r\n        {work}\r\n        <Button\r\n          title=\"Edit\"\r\n          color=\"green\"\r\n          type=\"edit\"\r\n          ontap={tap}\r\n          btntype=\"edit\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,eAAe;AACtB,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAC9B,eAAe,SAASC,YAAYA,CAAAC,IAAA,EAA0B;EAAAC,EAAA;EAAA,IAAvBC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;IAAEC,KAAK,GAAAH,IAAA,CAALG,KAAK;IAAEC,EAAE,GAAAJ,IAAA,CAAFI,EAAE;EACxD,IAAAC,SAAA,GAA8BZ,QAAQ,CAAC,KAAK,CAAC;IAAAa,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAxCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAC1B,IAAII,OAAO,GAAG,EAAE;EAChB,IAAIC,OAAO;EACX,IAAAC,UAAA,GAAwBnB,QAAQ,CAAC,EAAE,CAAC;IAAAoB,UAAA,GAAAN,cAAA,CAAAK,UAAA;IAA7BE,IAAI,GAAAD,UAAA;IAAEE,OAAO,GAAAF,UAAA;EACpB,SAASG,GAAGA,CAACC,MAAM,EAAE;IACnBT,QAAQ,KAAK,IAAI,GAAGC,WAAW,CAAC,KAAK,CAAC,GAAGA,WAAW,CAAC,IAAI,CAAC;IAC1DS,OAAO,CAACC,GAAG,CAACf,EAAE,CAAC;IACf,KAAK,IAAMgB,GAAG,IAAIhB,EAAE,EAAE;MACpB,IAAIgB,GAAG,IAAIjB,KAAK,EAAE;QAChBQ,OAAO,GAAGP,EAAE,CAACgB,GAAG,CAAC;MACnB;IACF;IACA,KAAK,IAAMA,IAAG,IAAIT,OAAO,EAAE;MACzB,IAAIU,KAAK,GAAGV,OAAO,CAACS,IAAG,CAAC;MACxB;MACA;MACA,IAAIE,MAAM,gBACR1B,OAAA;QAAK2B,SAAS,EAAC,SAAS;QAAArB,QAAA,gBACtBN,OAAA;UAAAM,QAAA,EAAKkB;QAAG;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACd/B,OAAA;UAAAM,QAAA,EAAImB;QAAK;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX,CACN;MACDjB,OAAO,CAACkB,IAAI,CAACN,MAAM,CAAC;IACtB;IAEAP,OAAO,CAACL,OAAO,CAAC;IAChB;EACF;;EAEA,OAAO,CAACF,QAAQ,gBACdZ,OAAA;IAAKiC,EAAE,EAAC,cAAc;IAAA3B,QAAA,gBACpBN,OAAA;MAAAM,QAAA,EAAKC,KAAK,CAAC2B,WAAW,CAAC;IAAC;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAE7BzB,QAAQ,eACTN,OAAA;MAAAM,QAAA,eACEN,OAAA,CAACF,MAAM;QACLS,KAAK,EAAC,QAAQ;QACd4B,KAAK,EAAC,KAAK;QACXC,IAAI,EAAC,QAAQ;QACbC,KAAK,EAAEjB,GAAI;QACXkB,OAAO,EAAC;MAAQ;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC,gBAEN/B,OAAA,CAAAE,SAAA;IAAAI,QAAA,eACEN,OAAA;MAAKiC,EAAE,EAAC,cAAc;MAAA3B,QAAA,GACnBY,IAAI,eACLlB,OAAA,CAACF,MAAM;QACLS,KAAK,EAAC,MAAM;QACZ4B,KAAK,EAAC,OAAO;QACbC,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEjB,GAAI;QACXkB,OAAO,EAAC;MAAM;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC,gBACN,CACH;AACH;AAAC1B,EAAA,CA3DuBF,YAAY;AAAAoC,EAAA,GAAZpC,YAAY;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}